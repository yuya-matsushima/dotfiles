set fileencodings=utf-8,ucs-bom,sjis,cp932,utf-16,utf-16le
filetype on
syntax on
filetype indent on
filetype plugin on
set iminsert=0
set imsearch=0
set number
set listchars=eol:$,tab:>\ ,extends:<
set ambiwidth=double
set showmatch
set notitle
set completeopt=menuone,preview,noinsert,noselect
set shortmess+=c
set nf=
set visualbell t_vb=
set whichwrap=b,s,h,l,<,>,[,]
set formatoptions+=mM
set browsedir=buffer
if has('win32') || has('win64') || has('mac')
  set clipboard+=unnamed
endif
set hidden
set autoread
set incsearch
set smartcase
set wrapscan
set hlsearch
noremap <esc><esc> :nohlsearch<CR><esc>
set autoindent
set cindent
set smartindent
set backspace=2
set noundofile
set noswapfile
set nobackup
set wildmenu
set cmdheight=2
set showcmd
set statusline=%f%m%=[%l/%L][%{&filetype}][%{&fileencoding?&fileencoding:&encoding}]
set laststatus=2
set splitbelow
set splitright
set diffopt-=filler diffopt=iwhite,horizontal

set tabstop=2
set shiftwidth=2
set expandtab
augroup tabSetting
  autocmd!
  autocmd FileType html,css setlocal tabstop=2 shiftwidth=2
  autocmd FileType javascript,typescript setlocal tabstop=2 shiftwidth=2
  autocmd FileType markdown setlocal tabstop=2 shiftwidth=2
  autocmd FileType slim,haml setlocal tabstop=2 shiftwidth=2
  autocmd FileType php setlocal tabstop=4 shiftwidth=4
  autocmd FileType python setlocal tabstop=4 shiftwidth=4
  autocmd FileType go setlocal noexpandtab tabstop=2 shiftwidth=2
augroup END

if has('folding')
  set foldenable
  set foldmethod=indent
  set fillchars=vert:\|
endif
augroup folding
  autocmd!
  autocmd FileType gitcommit,hgcommit setlocal nofoldenable
  autocmd FileType quickrun setlocal nofoldenable
  autocmd FileType scss,css setlocal foldmethod=marker foldmarker={,}
  autocmd FileType html,xhtml setlocal foldmethod=indent
augroup END

augroup shortcut
  autocmd!
  autocmd FileType * imap <buffer> , ,
  autocmd FileType * imap <> <><Left>
  autocmd FileType * imap <buffer> // //
  autocmd FileType php imap <buffer> <? <?php
  autocmd FileType php imap <buffer> dec declare(strict_types=1);
  autocmd FileType ruby imap <buffer> # #
augroup END

command! Sudow :w !sudo tee >/dev/null %

" Dynamic keyboard type detection and mapping
let g:keyboard_type = 'US'
let g:has_external_us_keyboard = strlen(system('ioreg -n IOUSB -l | grep -E "(HHKB|Keychron Q11)"')) > 0

" replace the colon and semicolon when a US keyboard
" or external US keyboard is connected.
if g:keyboard_type == 'US' || g:has_external_us_keyboard
  noremap ; :
  noremap : ;
  if g:keyboard_type != 'US'
    let g:keyboard_type = 'US'
  endif
endif

augroup alias
  autocmd!
  autocmd BufRead,BufNewFile *.md,*.md.erb setlocal filetype=markdown
  autocmd BufRead,BufNewFile *.scala.html setlocal filetype=scala
  autocmd BufRead,BufNewFile *.ts setlocal filetype=typescript
  autocmd BufRead,BufNewFile Vagrantfile,Guardfile setlocal filetype=ruby
  autocmd BufRead,BufNewFile *.envrc setlocal filetype=sh
  autocmd FileType sql setlocal filetype=mysql
  autocmd FileType scss.css setlocal filetype=scss
augroup END

" Auto change directory function
function! s:ChangeDir()
  if exists('*lcd#changeDir')
    call lcd#changeDir()
  else
    if fnameescape(expand('%:p:h')) != "quickrun:"
      execute 'lcd ' fnameescape(expand('%:p:h'))
    endif
  endif
endfunction

augroup bufferEvent
  autocmd!
  " Auto CD to file directory
  autocmd BufEnter * call s:ChangeDir()

  " Simple trailing whitespace removal
  autocmd BufWritePre * %s/\s\+$//e
  autocmd BufWritePre [:;]* try | echoerr 'Forbidden file name: ' . expand('<afile>') | endtry
  " autocmd BufWritePre *.php,*.js,*.jsx,*.tsx,*.ts,*.rb,*.c setlocal fenc=utf-8
augroup END

augroup width
  autocmd!
  autocmd FileType gitcommit,hgcommit setlocal textwidth=72
  autocmd FileType rst setlocal textwidth=80
  autocmd FileType javascript,typescript setlocal textwidth=80
  autocmd FileType php setlocal textwidth=80
  if exists('&colorcolumn')
    autocmd FileType rst,gitcommit,hgcommit setlocal colorcolumn=+1
  endif
augroup END
