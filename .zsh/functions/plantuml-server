#!/bin/zsh

# Check dependencies
if ! command -v docker >/dev/null 2>&1; then
  echo "Error: Docker is not installed or not in PATH" >&2
  return 1
fi

if ! docker info >/dev/null 2>&1; then
  echo "Error: Docker is not running" >&2
  return 1
fi

IMAGE_NAME=plantuml/plantuml-server:jetty
PORT=9876
CONTAINER_NAME=plantuml-server

_ymt_plantumlserver_usage() {
  cat <<EOF
plantuml-server is a command for managing the local PlantUML Server.

Usage:
    plantuml-server start    start plantuml-server at http://localhost:$PORT
    plantuml-server stop     stop plantuml-server
    plantuml-server status   check current plantuml-server status

Options:
    --help, -h               print help

Dependencies:
    Docker for Mac
EOF
}

_ymt_is_container_running() {
  docker ps -q -f name="$CONTAINER_NAME" 2>/dev/null
}

_ymt_plantumlserver_start() {
  if [[ -n $(_ymt_is_container_running) ]]; then
    echo "PlantUML Server is already running"
  else
    # 停止したコンテナがあるか確認
    if docker ps -a --format "{{.Names}}" 2>/dev/null | grep -q "^${CONTAINER_NAME}$"; then
      echo "Starting existing container..."
      if ! docker start "$CONTAINER_NAME" >/dev/null 2>&1; then
        echo "Error: Failed to start existing container" >&2
        return 1
      fi
    else
      echo "Creating new container..."
      if ! docker run -d --name "$CONTAINER_NAME" -p "$PORT:8080" "$IMAGE_NAME" >/dev/null 2>&1; then
        echo "Error: Failed to create and start container" >&2
        return 1
      fi
    fi
    echo "PlantUML Server started at http://localhost:$PORT"
  fi
}

_ymt_plantumlserver_stop() {
  if [[ -n $(_ymt_is_container_running) ]]; then
    echo "Stopping PlantUML Server..."
    if ! docker stop "$CONTAINER_NAME" >/dev/null 2>&1; then
      echo "Warning: Failed to stop container gracefully" >&2
    fi
    if ! docker rm "$CONTAINER_NAME" >/dev/null 2>&1; then
      echo "Warning: Failed to remove container" >&2
    fi
    echo "PlantUML Server stopped"
  else
    echo "PlantUML Server is not running"
    # 停止したコンテナがある場合は削除
    if docker ps -a --format "{{.Names}}" 2>/dev/null | grep -q "^${CONTAINER_NAME}$"; then
      echo "Cleaning up stopped container..."
      docker rm "$CONTAINER_NAME" >/dev/null 2>&1
    fi
  fi
}

_ymt_plantumlserver_status() {
  if ! docker ps -f name="$CONTAINER_NAME" --format "table {{.ID}}\t{{.Image}}\t{{.CreatedAt}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null; then
    echo "Error: Failed to get container status" >&2
    return 1
  fi
}

case ${1} in
  --help|-h)
    _ymt_plantumlserver_usage
  ;;

  start)
    _ymt_plantumlserver_start
  ;;

  stop)
    _ymt_plantumlserver_stop
  ;;

  status)
    _ymt_plantumlserver_status
  ;;
esac
