#!/usr/bin/env zsh

# OS チェック
if [[ $OSTYPE != 'darwin'* ]]; then
  echo "Error: This command is only available on macOS" >&2
  return 1
fi

# 依存コマンドチェック
if ! (( $+commands[SwitchAudioSource] )); then
  echo "Error: SwitchAudioSource is not installed" >&2
  echo "Please install it with: brew install switchaudio-osx" >&2
  return 1
fi

if ! (( $+commands[fzf] )); then
  echo "Error: fzf is not installed" >&2
  echo "Please install it with: brew install fzf" >&2
  return 1
fi

# ヘルプ関数
_ymt_switchsound_usage() {
  cat <<EOF
switchsound - Audio device switcher for macOS using fzf

Usage:
    switchsound               show help
    switchsound list          list all available audio devices
    switchsound status        show current input/output devices
    switchsound input         select and switch input device with fzf
    switchsound output        select and switch output device with fzf

Options:
    --help, -h               show this help

Dependencies:
    switchaudio-osx (brew install switchaudio-osx)
    fzf (brew install fzf)

Examples:
    switchsound output       # Select output device interactively
    switchsound input        # Select input device interactively
    switchsound list         # Show all available devices
EOF
}

# デバイス一覧表示
_ymt_switchsound_list() {
  local current_output current_input
  current_output=$(SwitchAudioSource -t output -c)
  current_input=$(SwitchAudioSource -t input -c)
  
  echo "=== Output Devices ==="
  while IFS= read -r device; do
    if [[ "$device" == "$current_output" ]]; then
      echo "* $device"
    else
      echo "  $device"
    fi
  done < <(SwitchAudioSource -t output -a)
  
  echo ""
  echo "=== Input Devices ==="
  while IFS= read -r device; do
    if [[ "$device" == "$current_input" ]]; then
      echo "* $device"
    else
      echo "  $device"
    fi
  done < <(SwitchAudioSource -t input -a)
}

# 現在の状態表示
_ymt_switchsound_status() {
  local current_output current_input
  current_output=$(SwitchAudioSource -t output -c)
  current_input=$(SwitchAudioSource -t input -c)
  
  echo "Current Audio Devices:"
  echo "  Output: $current_output"
  echo "  Input:  $current_input"
}

# 出力デバイス切り替え
_ymt_switchsound_output() {
  local devices current selected
  current=$(SwitchAudioSource -t output -c)
  
  # デバイスリストを作成（現在のデバイスにマークを付ける）
  devices=""
  while IFS= read -r device; do
    if [[ "$device" == "$current" ]]; then
      devices+="► $device (current)\n"
    else
      devices+="  $device\n"
    fi
  done < <(SwitchAudioSource -t output -a)
  
  # fzfで選択（現在のデバイスを初期選択）
  selected=$(echo -e "$devices" | fzf \
    --height=40% \
    --layout=reverse \
    --header="Select Output Device (current: $current)" \
    --preview="echo 'Selected device will be set as audio output'" \
    --preview-window=down:2 \
    | sed 's/^[► ] *//' | sed 's/ (current)$//')
  
  if [[ -n "$selected" ]]; then
    if SwitchAudioSource -t output -s "$selected"; then
      echo "Output device switched to: $selected"
      echo ""
      _ymt_switchsound_status
    else
      echo "Error: Failed to switch output device" >&2
      return 1
    fi
  fi
}

# 入力デバイス切り替え
_ymt_switchsound_input() {
  local devices current selected
  current=$(SwitchAudioSource -t input -c)
  
  # デバイスリストを作成（現在のデバイスにマークを付ける）
  devices=""
  while IFS= read -r device; do
    if [[ "$device" == "$current" ]]; then
      devices+="► $device (current)\n"
    else
      devices+="  $device\n"
    fi
  done < <(SwitchAudioSource -t input -a)
  
  # fzfで選択（現在のデバイスを初期選択）
  selected=$(echo -e "$devices" | fzf \
    --height=40% \
    --layout=reverse \
    --header="Select Input Device (current: $current)" \
    --preview="echo 'Selected device will be set as audio input'" \
    --preview-window=down:2 \
    | sed 's/^[► ] *//' | sed 's/ (current)$//')
  
  if [[ -n "$selected" ]]; then
    if SwitchAudioSource -t input -s "$selected"; then
      echo "Input device switched to: $selected"
      echo ""
      _ymt_switchsound_status
    else
      echo "Error: Failed to switch input device" >&2
      return 1
    fi
  fi
}

# メイン処理
case "${1:-help}" in
  list)
    _ymt_switchsound_list
    ;;
  status)
    _ymt_switchsound_status
    ;;
  output)
    _ymt_switchsound_output
    ;;
  input)
    _ymt_switchsound_input
    ;;
  --help|-h|help)
    _ymt_switchsound_usage
    ;;
  *)
    echo "Error: Unknown subcommand '$1'" >&2
    echo "Run 'switchsound --help' for usage." >&2
    return 1
    ;;
esac
