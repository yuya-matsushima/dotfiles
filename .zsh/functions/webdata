#!/bin/zsh

_ymt_webdata_usage() {
  cat <<EOF
webdata is a tool to capture website data (screenshots and markdown) for LLM processing.

Usage:
    webdata <URL>                     Capture data from a URL (sitemap.xml or webpage)
    webdata <URL> -o <directory>      Specify output directory
    webdata <URL> --output <directory> Specify output directory
    webdata --help                    Show this help message

Arguments:
    URL                               The URL to capture (sitemap.xml or webpage URL)

Options:
    -o, --output <directory>          Output directory (default: ./output)
    -f, --force                       Skip overwrite confirmation
    -c, --concurrent <number>         Number of concurrent pages to process (default: 3)
    --pc                              Capture PC size screenshots (1280x800)
    --tablet                          Capture tablet size screenshots (768x1024)
    --mobile                          Capture mobile size screenshots (375x667)
    -h, --help                        Show this help message
    
    Note: If no device flags are specified, --pc is used by default

Output Structure:
    <output-dir>/
    ├── captures/
    │   ├── pc/       # PC size screenshots (1280x800)
    │   ├── tablet/   # Tablet size screenshots (768x1024)
    │   └── mobile/   # Mobile size screenshots (375x667)
    └── markdown/     # Text content (Markdown)

Examples:
    # Capture all pages from sitemap.xml (PC size by default)
    webdata https://example.com/sitemap.xml

    # Capture single page in multiple device sizes
    webdata https://example.com/about --pc --tablet --mobile

    # Capture mobile size only
    webdata https://example.com/products/item1 --mobile

    # Use concurrent processing for faster capture
    webdata https://example.com/sitemap.xml -c 5 --pc --tablet

Dependencies:
    - Node.js
    - pnpm (for package management)
    - npm packages (automatically installed on first run)
EOF
}

# Main function
main() {
  local url=""
  local output_dir="./output"
  local concurrent_arg=""
  local device_args=""
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        _ymt_webdata_usage
        return 0
        ;;
      -o|--output)
        shift
        if [[ -z "$1" ]]; then
          echo "Error: Output directory not specified" >&2
          return 1
        fi
        output_dir="$1"
        shift
        ;;
      -c|--concurrent)
        shift
        if [[ -z "$1" ]]; then
          echo "Error: Concurrent number not specified" >&2
          return 1
        fi
        concurrent_arg="--concurrent $1"
        shift
        ;;
      --pc)
        device_args="$device_args --pc"
        shift
        ;;
      --tablet)
        device_args="$device_args --tablet"
        shift
        ;;
      --mobile)
        device_args="$device_args --mobile"
        shift
        ;;
      -*)
        echo "Error: Unknown option $1" >&2
        _ymt_webdata_usage
        return 1
        ;;
      *)
        if [[ -z "$url" ]]; then
          url="$1"
        else
          echo "Error: Multiple URLs specified" >&2
          _ymt_webdata_usage
          return 1
        fi
        shift
        ;;
    esac
  done
  
  # Check if URL is provided
  if [[ -z "$url" ]]; then
    echo "Error: URL is required" >&2
    _ymt_webdata_usage
    return 1
  fi
  
  # Get the directory where this script is located
  local script_dir="${0:A:h}"
  local dotfiles_dir="${script_dir:h:h}"
  local node_project_dir="${dotfiles_dir}/.zsh/bin/webdata-node"
  
  # Check if Node.js project exists
  if [[ ! -d "$node_project_dir" ]]; then
    echo "Error: Node.js project not found at $node_project_dir" >&2
    echo "Please ensure the dotfiles are properly installed." >&2
    return 1
  fi
  
  # Check if dependencies are installed, if not, install them
  if [[ ! -d "$node_project_dir/node_modules" ]] || [[ ! -f "$node_project_dir/pnpm-lock.yaml" ]]; then
    echo "Installing dependencies for webdata..."
    (cd "$node_project_dir" && pnpm install) || {
      echo "Error: Failed to install dependencies" >&2
      return 1
    }
  fi
  
  # Run the Node.js script
  node "$node_project_dir/index.js" "$url" --output "$output_dir" $concurrent_arg $device_args
}

main "$@"