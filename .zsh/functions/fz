#!/usr/bin/env zsh
# fz - fzf wrapper command

# 設定定数
readonly FZ_MAX_DEPTH=3
readonly FZ_PREVIEW_FILES=5
readonly FZ_PREVIEW_LINES=20

# ヘルパー関数
_ymt_fz_get_preview_cmd() {
  local file_path="$1"
  if (( $+commands[bat] )); then
    echo "bat --style=full --color=always '$file_path'"
  else
    echo "cat '$file_path'"
  fi
}

_ymt_fz_get_pager_cmd() {
  local file_path="$1"
  if (( $+commands[bat] )); then
    echo "bat --style=full --paging=always '$file_path'"
  else
    echo "${PAGER:-less} '$file_path'"
  fi
}

_ymt_fz_preview_directory() {
  local dir="$1"
  ls -la --color=always -- "$dir"
  echo
  find "$dir" -maxdepth 1 -type f 2>/dev/null | head -$FZ_PREVIEW_FILES | \
    while read -r file; do
      echo "=== $file ==="
      if (( $+commands[bat] )); then
        bat --style=plain --line-range=:$FZ_PREVIEW_LINES --color=always "$file" 2>/dev/null || echo "(binary file)"
      fi
    done
}

# 依存コマンドのチェック
_ymt_fz_check_dependencies() {
  local subcommand="$1"
  local missing_deps=()

  # 基本的な依存
  if ! (( $+commands[fzf] )); then
    missing_deps+=("fzf")
  fi

  if ! (( $+commands[git] )); then
    missing_deps+=("git")
  fi

  # サブコマンド固有の必須依存
  if [[ "$subcommand" == "docker" ]] && ! (( $+commands[docker] )); then
    missing_deps+=("docker")
  fi

  if [[ "$subcommand" == "pr" || "$subcommand" == "issue" ]]; then
    if ! (( $+commands[gh] )); then
      missing_deps+=("gh")
    fi
    if ! (( $+commands[jq] )); then
      missing_deps+=("jq")
    fi
  fi

  if [[ "$subcommand" == "find" || "$subcommand" == "view" ]] && ! (( $+commands[fd] )); then
    missing_deps+=("fd")
  fi

  # オプショナルな依存（警告のみ）
  local optional_deps=()
  if ! (( $+commands[bat] )); then
    optional_deps+=("bat (syntax highlighting)")
  fi

  if ! (( $+commands[glow] )); then
    optional_deps+=("glow (markdown rendering for pr/issue)")
  fi

  if ! (( $+commands[pbcopy] )) && [[ "$OSTYPE" == "darwin"* ]]; then
    optional_deps+=("pbcopy (clipboard support)")
  fi

  # 必須コマンドが不足している場合はエラー
  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    echo "Error: Missing required dependencies:" >&2
    printf "  - %s\n" "${missing_deps[@]}" >&2
    echo "Please install them first." >&2
    return 1
  fi

  # オプショナルコマンドの警告
  if [[ ${#optional_deps[@]} -gt 0 ]]; then
    echo "Warning: Missing optional dependencies for better experience:" >&2
    printf "  - %s\n" "${optional_deps[@]}" >&2
  fi

  return 0
}

# サブコマンドのヘルプ
_ymt_fz_usage() {
  cat <<EOF
fz - fzf wrapper command

Usage: fz <subcommand> [options]

Subcommands:
  branch    Git branch切り替え
  log       Git commit履歴検索（batでシンタックスハイライト）
  kill      プロセス検索・kill
  docker    Docker container接続
  history   コマンド履歴検索・実行
  env       環境変数検索・表示
  cd        ディレクトリ履歴から移動（fdで拡張検索）
  pr        GitHub Pull Request一覧
  issue     GitHub Issue一覧
  find      ファイル検索（fdを使用）
  view      ファイル内容表示（batを使用）
  help      このヘルプを表示

Examples:
  fz branch     # Git branchを選択して切り替え
  fz log        # Git logを検索（Ctrl+Yでhash copy）
  fz kill       # プロセスを選択してkill
  fz docker     # Docker containerを選択して接続
  fz history    # コマンド履歴を検索して実行
  fz env        # 環境変数を検索・表示
  fz cd         # ディレクトリ履歴から選択して移動
  fz pr         # Pull Requestを選択して詳細表示
  fz issue      # Issueを選択して詳細表示
  fz find       # ファイルを検索して選択
  fz view       # ファイルを検索してbatで表示
EOF
}

# Git branch切り替え
_ymt_fz_branch() {
  # Git リポジトリチェック
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository" >&2
    return 1
  fi

  local branches branch
  branches=$(git branch | grep -v '^\*') &&
  branch=$(echo "$branches" | fzf --height $((2 + $(wc -l <<< "$branches"))) -m) &&
  git checkout $(echo "$branch" | sed 's/^[ \t]*//')
}

# Git commit履歴検索
_ymt_fz_log() {
  # Git リポジトリチェック
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository" >&2
    return 1
  fi

  local preview_cmd
  if (( $+commands[bat] )); then
    preview_cmd="printf '%s' {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -r git show --color=always | bat --style=plain --language=diff --color=always"
  else
    preview_cmd="printf '%s' {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -r git show --color=always"
  fi

  local enter_cmd
  if (( $+commands[bat] )); then
    enter_cmd="enter:become(printf '%s' {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -r git show | bat --style=full --language=diff --paging=always)"
  else
    enter_cmd="enter:become(printf '%s' {} | grep -o '[a-f0-9]\\{7\\}' | head -1 | xargs -r git show | less -R)"
  fi

  if (( $+commands[pbcopy] )); then
    git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index \
      --bind=ctrl-s:toggle-sort \
      --bind='ctrl-y:execute(echo {} | grep -o "[a-f0-9]\{7\}" | head -1 | pbcopy)+abort' \
      --header "Press CTRL-Y to copy commit hash" \
      --preview "$preview_cmd" \
      --bind "$enter_cmd"
  else
    git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index \
      --bind=ctrl-s:toggle-sort \
      --preview "$preview_cmd" \
      --bind "$enter_cmd"
  fi
}

# プロセスkill
_ymt_fz_kill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

# Docker container選択
_ymt_fz_docker() {
  if ! (( $+commands[docker] )); then
    echo "Error: docker command not found" >&2
    return 1
  fi

  # Docker daemonが起動しているかチェック
  if ! docker ps > /dev/null 2>&1; then
    echo "Error: Docker daemon is not running or permission denied" >&2
    return 1
  fi

  local container
  container=$(docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Image}}" | sed 1d | fzf | awk '{print $1}')
  if [ -n "$container" ]; then
    docker exec -it $container /bin/bash || docker exec -it $container /bin/sh
  fi
}

# コマンド履歴検索・実行
_ymt_fz_history() {
  local selected_command
  selected_command=$(fc -ln 1 | awk '!seen[$0]++' | fzf --tac --no-sort \
    --preview 'echo {}' \
    --preview-window=down:3:wrap \
    --header "Press Enter to execute command")

  if [ -n "$selected_command" ]; then
    # コマンドラインに入力するのみ（実行はユーザーに委ねる）
    print -z "$selected_command"
  fi
}

# 環境変数検索・表示
_ymt_fz_env() {
  local selected_env
  if (( $+commands[pbcopy] )); then
    selected_env=$(env | grep -E '^[A-Za-z_][A-Za-z0-9_]*=' | sort | fzf \
      --preview 'echo {} | cut -d= -f2-' \
      --preview-window=right:50%:wrap \
      --header "Environment variables (Press CTRL-Y to copy)" \
      --bind='ctrl-y:execute(echo {} | pbcopy)')
  else
    selected_env=$(env | grep -E '^[A-Za-z_][A-Za-z0-9_]*=' | sort | fzf \
      --preview 'echo {} | cut -d= -f2-' \
      --preview-window=right:50%:wrap \
      --header "Environment variables")
  fi

  if [ -n "$selected_env" ]; then
    echo "$selected_env"
  fi
}

# ディレクトリ履歴から移動
_ymt_fz_cd() {
  local selected_dir
  local dirs_list

  # 履歴とfdの結果を組み合わせ
  local fd_dirs hist_dirs
  hist_dirs=$(dirs -p | tail -n +2)
  
  if (( $+commands[fd] )); then
    fd_dirs=$(fd -t d --max-depth $FZ_MAX_DEPTH . 2>/dev/null | sed 's|^\./||')
    if [ $? -eq 0 ] && [ -n "$fd_dirs" ]; then
      dirs_list=$(printf '%s\n%s\n' "$hist_dirs" "$fd_dirs" | awk '!seen[$0]++')
    else
      dirs_list=$(echo "$hist_dirs" | awk '!seen[$0]++')
    fi
  else
    dirs_list=$(echo "$hist_dirs" | awk '!seen[$0]++')
  fi

  # プレビューコマンドの設定
  local preview_cmd
  if (( $+commands[bat] )); then
    preview_cmd='_ymt_fz_preview_directory "{}"'
  else
    preview_cmd='ls -la --color=always -- "{}"'
  fi

  selected_dir=$(echo "$dirs_list" | fzf \
    --preview "$preview_cmd" \
    --preview-window=right:50% \
    --header "Directory history + fd search (max depth: $FZ_MAX_DEPTH)")

  if [ -n "$selected_dir" ]; then
    cd "$selected_dir"
    pwd
  fi
}

# GitHub Pull Request一覧
_ymt_fz_pr() {
  if ! (( $+commands[gh] )); then
    echo "Error: gh command not found. Please install GitHub CLI." >&2
    return 1
  fi

  # GitHubリポジトリチェック
  if ! gh repo view > /dev/null 2>&1; then
    echo "Error: Not in a GitHub repository or not authenticated" >&2
    return 1
  fi

  local selected_pr
  selected_pr=$(gh pr list --limit 100 --json number,title,author,state,createdAt,headRefName \
    --template '{{range .}}#{{.number}} {{.title}} ({{.author.login}}) [{{.state}}] {{.headRefName}}{{"\n"}}{{end}}' |
    fzf \
        --header "Select PR (Enter: view in terminal, Ctrl-O: open in browser)" \
        --bind='ctrl-o:execute(echo {} | grep -o "^#[0-9]\+" | tr -d "#" | xargs -I % gh pr view % --web)')

  if [ -n "$selected_pr" ]; then
    local pr_number=$(echo "$selected_pr" | cut -d'#' -f2 | cut -d' ' -f1)
    if (( $+commands[glow] )); then
      # glow でMarkdownをレンダリング
      {
        gh pr view "$pr_number" --json number,title,author,state,createdAt,url | jq -r '"# PR #\(.number): \(.title)\n\n**Author:** \(.author.login)  \n**State:** \(.state)  \n**Created:** \(.createdAt | sub("T"; " ") | sub("Z"; " UTC"))  \n**URL:** \(.url)\n\n---\n"'
        gh pr view "$pr_number" --json body -q ".body" | sed "s/<[^>]*>//g"
      } | glow -p -
    else
      # glowがない場合は通常表示
      if [ -n "$PAGER" ]; then
        gh pr view "$pr_number" | $PAGER
      else
        gh pr view "$pr_number" | less -R
      fi
    fi
  fi
}

# GitHub Issue一覧
_ymt_fz_issue() {
  if ! (( $+commands[gh] )); then
    echo "Error: gh command not found. Please install GitHub CLI." >&2
    return 1
  fi

  # GitHubリポジトリチェック
  if ! gh repo view > /dev/null 2>&1; then
    echo "Error: Not in a GitHub repository or not authenticated" >&2
    return 1
  fi

  local selected_issue
  selected_issue=$(gh issue list --limit 100 --json number,title,author,state,createdAt,labels \
    --template '{{range .}}#{{.number}} {{.title}} ({{.author.login}}) [{{.state}}]{{if .labels}} {{range .labels}}[{{.name}}]{{end}}{{end}}{{"\n"}}{{end}}' |
    fzf \
        --header "Select issue (Enter: view in terminal, Ctrl-O: open in browser)" \
        --bind='ctrl-o:execute(echo {} | grep -o "^#[0-9]\+" | tr -d "#" | xargs -I % gh issue view % --web)')

  if [ -n "$selected_issue" ]; then
    local issue_number=$(echo "$selected_issue" | cut -d'#' -f2 | cut -d' ' -f1)
    if (( $+commands[glow] )); then
      # glow でMarkdownをレンダリング
      {
        gh issue view "$issue_number" --json number,title,author,state,createdAt,url,labels | jq -r '"# Issue #\(.number): \(.title)\n\n**Author:** \(.author.login)  \n**State:** \(.state)  \n**Created:** \(.createdAt | sub("T"; " ") | sub("Z"; " UTC"))  \n**Labels:** \(.labels | map(.name) | join(", "))  \n**URL:** \(.url)\n\n---\n"'
        gh issue view "$issue_number" --json body -q ".body" | sed "s/<[^>]*>//g"
      } | glow -p -
    else
      # glowがない場合は通常表示
      if [ -n "$PAGER" ]; then
        gh issue view "$issue_number" | $PAGER
      else
        gh issue view "$issue_number" | less -R
      fi
    fi
  fi
}

# ファイル検索
_ymt_fz_find() {
  # fdコマンドの存在チェック
  if ! (( $+commands[fd] )); then
    echo "Error: fd command is required for find subcommand" >&2
    echo "Please install fd first: brew install fd" >&2
    return 1
  fi

  local files selected_file
  
  # fdでファイル一覧を取得
  files=$(fd -t f . 2>/dev/null)
  if [ -z "$files" ]; then
    echo "No files found in current directory" >&2
    return 1
  fi

  # fzfで選択
  selected_file=$(echo "$files" | fzf \
    --preview 'if (( $+commands[bat] )); then bat --style=full --color=always {}; else cat {}; fi' \
    --preview-window=right:60% \
    --header "File search with fd (gitignore respected)")

  if [ -n "$selected_file" ]; then
    echo "$selected_file"
    # クリップボードにコピー
    if (( $+commands[pbcopy] )); then
      echo -n "$selected_file" | pbcopy
      echo "Copied to clipboard!"
    fi
  fi
}

# ファイル内容表示
_ymt_fz_view() {
  # fdコマンドの存在チェック
  if ! (( $+commands[fd] )); then
    echo "Error: fd command is required for view subcommand" >&2
    echo "Please install fd first: brew install fd" >&2
    return 1
  fi

  local files selected_file
  
  # fdでファイル一覧を取得
  files=$(fd -t f . 2>/dev/null)
  if [ -z "$files" ]; then
    echo "No files found in current directory" >&2
    return 1
  fi

  # fzfで選択
  selected_file=$(echo "$files" | fzf \
    --preview 'if (( $+commands[bat] )); then bat --style=full --color=always {}; else cat {}; fi' \
    --preview-window=right:60% \
    --bind='ctrl-y:execute(printf "%s" {} | pbcopy)+abort' \
    --header "Select file to view (Ctrl-Y to copy path)")

  if [ -n "$selected_file" ]; then
    if [ ! -r "$selected_file" ]; then
      echo "Error: Cannot read file '$selected_file'" >&2
      return 1
    fi
    
    eval "$(_ymt_fz_get_pager_cmd "$selected_file")"
  fi
}

# 依存関係をチェック
if ! _ymt_fz_check_dependencies "$1" 2>/dev/null; then
  _ymt_fz_check_dependencies "$1"
  return 1
fi

# メイン処理
case "${1:-help}" in
  branch)
    shift
    _ymt_fz_branch "$@"
    ;;
  log)
    shift
    _ymt_fz_log "$@"
    ;;
  kill)
    shift
    _ymt_fz_kill "$@"
    ;;
  docker)
    shift
    _ymt_fz_docker "$@"
    ;;
  history)
    shift
    _ymt_fz_history "$@"
    ;;
  env)
    shift
    _ymt_fz_env "$@"
    ;;
  cd)
    shift
    _ymt_fz_cd "$@"
    ;;
  pr)
    shift
    _ymt_fz_pr "$@"
    ;;
  issue)
    shift
    _ymt_fz_issue "$@"
    ;;
  find)
    shift
    _ymt_fz_find "$@"
    ;;
  view)
    shift
    _ymt_fz_view "$@"
    ;;
  help|--help|-h)
    _ymt_fz_usage
    ;;
  *)
    echo "Error: Unknown subcommand '$1'" >&2
    echo "Run 'fz help' for usage." >&2
    return 1
    ;;
esac
